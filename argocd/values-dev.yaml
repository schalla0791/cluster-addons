crds:
  install: true
  keep: true

global:
  image:
    repository: quay.io/argoproj/argocd
    tag: ""
    imagePullPolicy: IfNotPresent
  logging:
    format: text
    level: info
  securityContext: {}
  #  runAsUser: 999
  #  runAsGroup: 999
  #  fsGroup: 999
apiVersionOverrides:
  certmanager: "cert-manager.io/v1" 
  ingress: "networking.k8s.io/v1" # networking.k8s.io/v1beta1
  autoscaling: "autoscaling/v2beta1"

controller:
  name: application-controller
  replicas: 1
  args:
    statusProcessors: "20"
    operationProcessors: "10"
    appHardResyncPeriod: "0"
    appResyncPeriod: "180"
    selfHealTimeout: "5"
    repoServerTimeoutSeconds: "60"
  logFormat: "text"
  logLevel: "info"
  containerPort: 8082
  service:
    port: 8082
    portName: https-controller
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  serviceAccount:
    create: true
    name: argocd-application-controller
    automountServiceAccountToken: true
  metrics:
    enabled: false
    applicationLabels:
      enabled: false
      labels: []
    service:
      servicePort: 8082
      portName: http-metrics
    serviceMonitor:
      enabled: false
      interval: 30s
      relabelings: []
    rules:
      enabled: false
      spec: []
      # - alert: ArgoAppMissing
      #   expr: |
      #     absent(argocd_app_info)
      #   for: 15m
      #   labels:
      #     severity: critical
      #   annotations:
      #     summary: "[Argo CD] No reported applications"
      #     description: >
      #       Argo CD has not reported any applications data for the past 15 minutes which
      #       means that it must be down or not functioning properly.  This needs to be
      #       resolved for this cloud to continue to maintain state.
      # - alert: ArgoAppNotSynced
      #   expr: |
      #     argocd_app_info{sync_status!="Synced"} == 1
      #   for: 12h
      #   labels:
      #     severity: warning
      #   annotations:
      #     summary: "[{{`{{$labels.name}}`}}] Application not synchronized"
      #     description: >
      #       The application [{{`{{$labels.name}}`}} has not been synchronized for over
      #       12 hours which means that the state of this cloud has drifted away from the
      #       state inside Git.
    #   selector:
    #     prometheus: kube-prometheus
    #   namespace: monitoring
    #   additionalLabels: {}

  ## Enable if you would like to grant rights to Argo CD to deploy to the local Kubernetes cluster.
  clusterAdminAccess:
    enabled: true
  clusterRoleRules:
    enabled: false
    rules: []

dex:
  enabled: true
  name: dex-server
  metrics:
    enabled: false
    service:
      portName: http-metrics
    serviceMonitor:
      enabled: false
      interval: 30s

  image:
    repository: ghcr.io/dexidp/dex
    tag: v2.30.2
  initImage:
    repository: ""
    tag: ""
    imagePullPolicy: ""

  serviceAccount:
    create: true
    name: argocd-dex-server
    automountServiceAccountToken: true

  volumeMounts:
    - name: static-files
      mountPath: /shared

  volumes:
    - name: static-files
      emptyDir: {}

  containerPortHttp: 5556
  servicePortHttp: 5556
  servicePortHttpName: http
  containerPortGrpc: 5557
  servicePortGrpc: 5557
  servicePortGrpcName: grpc
  containerPortMetrics: 5558
  servicePortMetrics: 5558
  resources: 
    limits:
      cpu: 50m
      memory: 64Mi
    requests:
      cpu: 10m
      memory: 32Mi

redis:
  enabled: true
  name: redis
  image:
    repository: public.ecr.aws/docker/library/redis
    tag: 7.0.4-alpine
    imagePullPolicy: IfNotPresent
  containerPort: 6379
  servicePort: 6379
  containerSecurityContext:
    capabilities:
      drop:
        - all
    readOnlyRootFilesystem: true

  securityContext:
    runAsNonRoot: true
    runAsUser: 999
  serviceAccount:
    create: false
    automountServiceAccountToken: false
  resources:
    limits:
      cpu: 200m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 64Mi
  metrics:
    enabled: false
    image:
      repository: public.ecr.aws/bitnami/redis-exporter
      tag: 1.26.0-debian-10-r2
      imagePullPolicy: IfNotPresent
    containerPort: 9121
    resources:
      limits:
        cpu: 50m
        memory: 64Mi
      requests:
        cpu: 10m
        memory: 32Mi
    service:
      type: ClusterIP
      clusterIP: None
      servicePort: 9121
      portName: http-metrics
    serviceMonitor:
      enabled: false
      interval: 30s
redis-ha:
  enabled: true
  exporter:
    enabled: true
  persistentVolume:
    enabled: false
  redis:
    masterGroupName: argocd
    config:
      save: '""'
  haproxy:
    enabled: true
    metrics:
      enabled: true
  image:
    tag: 7.0.4-alpine

server:
  name: server
  replicas: 1
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 50
  image:
    repository: "" # defaults to global.image.repository
    tag: "" # defaults to global.image.tag
    imagePullPolicy: "" # IfNotPresent
  staticAssets:
    enabled: true
  logFormat: "text"
  logLevel: "info"
  containerPort: 8080

  containerSecurityContext:
    capabilities:
      drop:
        - all
    readOnlyRootFilesystem: true
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 64Mi
  certificate:
    enabled: true
    domain: playground.intelops.app
    issuer:
      group: "cert-manager.io"
      kind: "ClusterIssuer"
      name: "letsencrypt"
    additionalHosts:
    - argo.intelops.app
    secretName: argocd-server-tls
  service:
    type: ClusterIP
    nodePortHttp: 30080
    nodePortHttps: 30443
    servicePortHttp: 80
    servicePortHttps: 443
    servicePortHttpName: http
    servicePortHttpsName: https
    namedTargetPort: true
  metrics:
    enabled: false
    service:
      servicePort: 8083
      portName: http-metrics
    serviceMonitor:
      enabled: false
      interval: 30s

  serviceAccount:
    create: true
    name: argocd-server
    automountServiceAccountToken: true

  ingress:
    enabled: true
    hosts:
      - playground.intelops.app
    paths:
      - /
    pathType: Prefix
    extraPaths:
      []
      # - path: /*
      #   backend:
      #     serviceName: ssl-redirect
      #     servicePort: use-annotation
      ## for Kubernetes >=1.19 (when "networking.k8s.io/v1" is used)
      # - path: /*
      #   pathType: Prefix
      #   backend:
      #     service:
      #       name: ssl-redirect
      #       port:
      #         name: use-annotation

    # -- Ingress TLS configuration
    tls:
      - secretName: argocd-tls-certificate
        hosts:
          - playground.intelops.app

    https: false
  ingressGrpc:
    enabled: false
    isAWSALB: false
    hosts:
      []

    paths:
      - /
    pathType: Prefix
    extraPaths:
      []
    tls:
      []
    https: false

  configEnabled: true
  config:
    url: "playground.intelops.app"
    application.instanceLabelKey: argocd.argoproj.io/instance
    server.rbac.log.enforce.enable: "true"
    exec.enabled: "false"
    admin.enabled: "true"

    # dex.config: |
    #   connectors:
    #     # GitHub example
    #     - type: github
    #       id: github
    #       name: GitHub
    #       config:
    #         clientID: aabbccddeeff00112233
    #         clientSecret: $dex.github.clientSecret # Alternatively $<some_K8S_secret>:dex.github.clientSecret
    #         orgs:
    #         - name: your-github-org

    # oidc.config: |
    #   name: AzureAD
    #   issuer: https://login.microsoftonline.com/TENANT_ID/v2.0
    #   clientID: CLIENT_ID
    #   clientSecret: $oidc.azuread.clientSecret
    #   requestedIDTokenClaims:
    #     groups:
    #       essential: true
    #   requestedScopes:
    #     - openid
    #     - profile
    #     - email

  rbacConfig:
    #policy.csv: |
    policy.default: role:readonly

  rbacConfigCreate: true
  clusterAdminAccess:
    enabled: true
repoServer:
  name: repo-server
  replicas: 1

  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 50

  image:
    repository: "" # defaults to global.image.repository
    tag: "" # defaults to global.image.tag
    imagePullPolicy: "IfNotPresent"
  logFormat: "text"
  logLevel: "info"
  containerPort: 8081

  containerSecurityContext:
    capabilities:
      drop:
        - all
    readOnlyRootFilesystem: true

  resources:
    limits:
      cpu: 50m
      memory: 128Mi
    requests:
      cpu: 10m
      memory: 64Mi

  service:
    port: 8081
    portName: https-repo-server

  metrics:
    enabled: false
    service:
      servicePort: 8084
      portName: http-metrics
    serviceMonitor:
      enabled: false
      interval: 30s
      relabelings: []
      metricRelabelings: []
      selector: {}
      scheme: ""
      tlsConfig: {}
      namespace: "" # "monitoring"
      additionalLabels: {}
  clusterAdminAccess:
    enabled: false
  clusterRoleRules:
    enabled: false
    rules: []

  serviceAccount:
    create: true
    name: "argocd-repo-server"
    automountServiceAccountToken: true
applicationSet:
  enabled: true
  name: applicationset-controller
  replicaCount: 1
  image:
    repository: ""
    tag: ""
    imagePullPolicy: ""

  args:
    metricsAddr: :8080
    probeBindAddr: :8081
    enableLeaderElection: false
    policy: sync
    debug: false
    dryRun: false
  logFormat: "text"
  logLevel: "info"

  extraContainers: []
  metrics:
    enabled: false
    service:
      servicePort: 8085
      portName: http-metrics
    serviceMonitor:
      enabled: false
      interval: 30s
      relabelings: []
      metricRelabelings: []
      selector: {}
      scheme: ""
      tlsConfig: {}
      namespace: ""  # monitoring
      additionalLabels: {}

  imagePullSecrets: []
  service:
    annotations: {}
    labels: {}
    port: 7000
    portName: webhook

  serviceAccount:
    create: true
    name: ""
  podSecurityContext:
    fsGroup: 2000
  securityContext:
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1000

  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi
notifications:
  enabled: true
  name: notifications-controller
  argocdUrl: playground.intelops.app

  image:
    repository: ""
    tag: ""
    imagePullPolicy: ""
  updateStrategy:
    type: Recreate

  secret:
    create: true
    items: {}
  logFormat: "text"
  logLevel: "info"
  metrics:
    enabled: false
    port: 9001
    service:
      annotations: {}
      labels: {}
      portName: http-metrics
    serviceMonitor:
      enabled: false
      selector: {}
      additionalLabels: {}
      # namespace: monitoring
      # interval: 30s
      # scrapeTimeout: 10s
      # -- Prometheus ServiceMonitor scheme
      scheme: ""
      tlsConfig: {}

  notifiers: {}
    # service.slack: |
    # token: $slack-token
  securityContext:
    runAsNonRoot: true

  containerSecurityContext: {}
  priorityClassName: ""
  resources: 
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi

  serviceAccount:
    create: true
    name: argocd-notifications-controller
  cm:
    create: false
  subscriptions: []
    # # subscription for on-sync-status-unknown trigger notifications
    # - recipients:
    #   - slack:test2
    #   - email:test@gmail.com
    #   triggers:
    #   - on-sync-status-unknown
    # # subscription restricted to applications with matching labels only
    # - recipients:
    #   - slack:test3
    #   selector: test=true
    #   triggers:
    #   - on-sync-status-unknown

  # -- The notification template is used to generate the notification content
  ## For more information: https://argocd-notifications.readthedocs.io/en/stable/templates/
  templates: 
    template.app-deployed: |
      email:
        subject: New version of an application {{.app.metadata.name}} is up and running.
      message: |
        {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.
      slack:
        attachments: |
          [{
            "title": "{{ .app.metadata.name}}",
            "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
            "color": "#18be52",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            },
            {
              "title": "Revision",
              "value": "{{.app.status.sync.revision}}",
              "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]
    template.app-health-degraded: |
      email:
        subject: Application {{.app.metadata.name}} has degraded.
      message: |
        {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.
        Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
      slack:
        attachments: |-
          [{
            "title": "{{ .app.metadata.name}}",
            "title_link": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
            "color": "#f4c030",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]
    template.app-sync-failed: |
      email:
        subject: Failed to sync application {{.app.metadata.name}}.
      message: |
        {{if eq .serviceType "slack"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}
        Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
      slack:
        attachments: |-
          [{
            "title": "{{ .app.metadata.name}}",
            "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
            "color": "#E96D76",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]
    template.app-sync-running: |
      email:
        subject: Start syncing application {{.app.metadata.name}}.
      message: |
        The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.
        Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
      slack:
        attachments: |-
          [{
            "title": "{{ .app.metadata.name}}",
            "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
            "color": "#0DADEA",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]
    template.app-sync-status-unknown: |
      email:
        subject: Application {{.app.metadata.name}} sync status is 'Unknown'
      message: |
        {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.
        Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
        {{if ne .serviceType "slack"}}
        {{range $c := .app.status.conditions}}
            * {{$c.message}}
        {{end}}
        {{end}}
      slack:
        attachments: |-
          [{
            "title": "{{ .app.metadata.name}}",
            "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
            "color": "#E96D76",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]
    template.app-sync-succeeded: |
      email:
        subject: Application {{.app.metadata.name}} has been successfully synced.
      message: |
        {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.
        Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
      slack:
        attachments: |-
          [{
            "title": "{{ .app.metadata.name}}",
            "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
            "color": "#18be52",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]
  triggers:
    trigger.on-deployed: |
      - description: Application is synced and healthy. Triggered once per commit.
        oncePer: app.status.sync.revision
        send:
        - app-deployed
        when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
    trigger.on-health-degraded: |
      - description: Application has degraded
        send:
        - app-health-degraded
        when: app.status.health.status == 'Degraded'
    trigger.on-sync-failed: |
      - description: Application syncing has failed
        send:
        - app-sync-failed
        when: app.status.operationState.phase in ['Error', 'Failed']
    trigger.on-sync-running: |
      - description: Application is being synced
        send:
        - app-sync-running
        when: app.status.operationState.phase in ['Running']
    trigger.on-sync-status-unknown: |
      - description: Application status is 'Unknown'
        send:
        - app-sync-status-unknown
        when: app.status.sync.status == 'Unknown'
    trigger.on-sync-succeeded: |
      - description: Application syncing has succeeded
        send:
        - app-sync-succeeded
        when: app.status.operationState.phase in ['Succeeded']
    
    For more information: https://argocd-notifications.readthedocs.io/en/stable/triggers/#default-triggers
    defaultTriggers: |
      - on-sync-status-unknown

  bots:
    slack:
      enabled: false
      updateStrategy:
        type: Recreate
      image:
        repository: ""
        tag: ""
        imagePullPolicy: ""
      service:
        port: 80
        type: LoadBalancer
      serviceAccount:
        create: true
        name: argocd-notifications-bot
      securityContext:
        runAsNonRoot: true
      resources: {}
